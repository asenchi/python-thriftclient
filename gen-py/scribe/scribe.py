#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.protocol.TProtocol import *
import fb303.FacebookService
from ttypes import *
from thrift.Thrift import TProcessor

class Iface(fb303.FacebookService.Iface):
  def Log(self, messages):
    pass


class Client(fb303.FacebookService.Client, Iface):
  def __init__(self, iprot, oprot=None):
    fb303.FacebookService.Client.__init__(self, iprot, oprot)

  def Log(self, messages):
    self.send_Log(messages)
    return self.recv_Log()

  def send_Log(self, messages):
    self._oprot.writeMessageBegin('Log', TMessageType.CALL, self._seqid)
    args = Log_args()
    args.messages = messages
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_Log(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    result = Log_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise Exception("Log failed: unknown result");


class Processor(fb303.FacebookService.Processor, Iface, TProcessor):
  def __init__(self, handler):
    fb303.FacebookService.Processor.__init__(self, handler)
    self._processMap["Log"] = Processor.process_Log

  def process(self, iprot, oprot):
    (name, type, seqid)  = iprot.readMessageBegin()
    if name not in self._processMap:
      print 'Unknown function %s' % (name)
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_Log(self, seqid, iprot, oprot):
    args = Log_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = Log_result()
    result.success = self._handler.Log(args.messages)
    oprot.writeMessageBegin("Log", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class Log_args:

  def __init__(self, d=None):
    self.messages = None
    if isinstance(d, dict):
      if 'messages' in d:
        self.messages = d['messages']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.messages = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = LogEntry()
            _elem5.read(iprot)
            self.messages.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Log_args')
    if self.messages != None:
      oprot.writeFieldBegin('messages', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.messages))
      for iter6 in self.messages:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Log_result:

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Log_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)


